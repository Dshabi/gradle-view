apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'gradle-one-jar'

sourceCompatibility = 1.6
targetCompatibility = 1.6

group = 'com.github.rholder'
version = '2.0.2'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

allprojects {
    repositories {
        maven {
            url 'http://repo.gradle.org/gradle/libs-releases-local'
        }
        mavenCentral()
    }
}

configurations {
    provided
}

sourceSets.main {
    compileClasspath += configurations.provided
}

jar {
    into('META-INF') {
        from 'META-INF/plugin.xml'
        from 'LICENSE'
    }
    into('') {
        // well this is wonky...
        from 'gradle-acumen/build/libs/gradle-acumen-0.1.0.jar'
    }
}

dependencies {
    compile "org.gradle:gradle-tooling-api:${gradleToolingApiVersion}"
    compile 'com.google.guava:guava:11.0.2'
    compile 'commons-io:commons-io:2.2'
    compile 'commons-lang:commons-lang:2.6'

    runtime 'org.slf4j:slf4j-simple:1.7.2'

    // IntelliJ plugin runtime libraries, since they're not available from a convenient repo
    provided files('intellij/extensions-135.690.jar')
    provided files('intellij/openapi-135.690.jar')
    provided files('intellij/util-135.690.jar')

    // force this project to build before assembling jar so we can stuff it in there
    provided project(':gradle-acumen')

    // just need the api jar
    compile(project(':gradle-acumen-api')) {
        transitive = false
    }
}

// ensure our project type is set to IntelliJ plugin
idea.module {
    jdkName = ideaPluginJdkName
    iml {
        withXml {
            def node = it.asNode()
            node.attributes().put('type','PLUGIN_MODULE')
        }
    }
}

task distPlugin(type: Zip, dependsOn: jar) {
    description = "Generate the IntelliJ plugin archive from the current project."
    into("${project.name}/lib") {
        from jar.archivePath
        from configurations.runtime
    }
}

task distStandalone(type: OneJar) {
    mainClass = 'com.github.rholder.gradle.ui.DependencyViewerStandalone'
}

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = gradleToolingApiVersion
}
